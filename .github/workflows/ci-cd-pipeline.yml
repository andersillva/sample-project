name: CI/CD Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

env:
  IMAGE_NAME: andersillva/sample-project
  IMAGE_TAG: ${{ github.sha }}

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: mvn test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: mvn verify -Dskip.unit.tests=true

  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarCloud packages
        uses: actions/cache@v4.2.3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4.2.3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=andersillva_sample-project -Dsonar.organization=andersillva1

  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: code-analysis

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - run: mvn clean package -DskipTests

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Push Docker image
        run: docker push $IMAGE_NAME:$IMAGE_TAG

  deploy-qa:
    name: Deploy to QA (Amazon ECS)
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: qa
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Render ECS task definition for QA
        id: render-task-def-qa
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def-qa.json
          container-name: sample-project
          image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to ECS QA
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def-qa.outputs.task-definition }}
          service: sample-project-task-service-qa
          cluster: andersillva-sample-project-qa-cluster
          wait-for-service-stability: true

  smoke-test-qa:
    name: Smoke Test QA
    runs-on: ubuntu-latest
    needs: deploy-qa

    steps:
      - uses: actions/checkout@v3
      - name: Smoke Test
        shell: bash
        run: |
          bash src/main/scripts/smoke-test.sh "http://sample-project-alb-2025945722.us-east-2.elb.amazonaws.com/api/v1/sample/health-check"

  deploy-pre-prod:
    name: Deploy to Pre Prod (Amazon ECS)
    runs-on: ubuntu-latest
    needs: smoke-test-qa
    if: github.ref == 'refs/heads/main'
    environment:
      name: pre-production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Render ECS task definition for Pre Production
        id: render-task-def-pre-prod
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def-pre-prod.json
          container-name: sample-project
          image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to ECS Pre Production
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def-pre-prod.outputs.task-definition }}
          service: sample-project-task-service-pre-prod
          cluster: andersillva-sample-project-pre-prod-cluster
          wait-for-service-stability: true

  smoke-test-pre-prod:
    name: Smoke Test Pre Prod
    runs-on: ubuntu-latest
    needs: deploy-pre-prod

    steps:
      - uses: actions/checkout@v3
      - name: Smoke Test
        shell: bash
        run: |
          sh 'src/main/scripts/smoke-test.sh'

  deploy-prod:
    name: Deploy to Prod (Amazon ECS)
    runs-on: ubuntu-latest
    needs: smoke-test-pre-prod
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Render ECS task definition for Production
        id: render-task-def-prod
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def-prod.json
          container-name: sample-project
          image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to ECS Production
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def-prod.outputs.task-definition }}
          service: sample-project-task-service-prod
          cluster: andersillva-sample-project-prod-cluster
          wait-for-service-stability: true
